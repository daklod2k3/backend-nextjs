generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model CATEGORY {
  category_id Int       @id(map: "PK_CATEGORY") @default(autoincrement())
  name        String?   @db.NVarChar(Max)
  PRODUCT     PRODUCT[]
}

model CUSTOMER {
  customer_id Int     @id(map: "PK_CUSTOMER") @default(autoincrement())
  name        String? @db.NVarChar(50)
  address     String? @db.NVarChar(50)
  phone       String? @db.NVarChar(15)
  personal_id String? @db.NVarChar(50)
  user_id     Int?
  USER        USER?   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_CUSTOMER_USER")
}

model EMPLOYEE {
  employee_id Int       @id(map: "PK_EMPLOYEE") @default(autoincrement())
  name        String?   @db.NVarChar(50)
  address     String?   @db.NVarChar(Max)
  phone       String?   @db.NVarChar(15)
  personal_id String?   @db.NVarChar(50)
  sex         String?   @db.Char(10)
  birthday    DateTime? @db.Date
  user_id     Int?
  USER        USER?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_EMPLOYEE_USER")
  INVOICE     INVOICE[]
}

model FUNCTION {
  function_id   Int             @id(map: "FUNCTION_pk") @default(autoincrement())
  name          String?         @db.NVarChar(50)
  date_created  DateTime?       @db.Date
  ROLE_FUNCTION ROLE_FUNCTION[]
}

model INVOICE {
  invoice_id     Int              @id(map: "PK_INVOICE") @default(autoincrement())
  employee_id    Int?
  user_id        Int?
  status_id      Int
  date_created   DateTime?        @default(now(), map: "DEFAULT_INVOICE_date_created") @db.Date
  EMPLOYEE       EMPLOYEE?        @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_INVOICE_EMPLOYEE_1")
  INVOICE_STATUS INVOICE_STATUS   @relation(fields: [status_id], references: [invoice_status_id], onUpdate: NoAction, map: "FK_INVOICE_INVOICE_STATUS")
  USER           USER?            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_INVOICE_USER")
  INVOICE_DETAIL INVOICE_DETAIL[]
}

model INVOICE_DETAIL {
  id         Int      @default(autoincrement())
  invoice_id Int?
  product_id Int
  amount     Int
  total      Float?
  tax        Float?
  user_id    Int
  INVOICE    INVOICE? @relation(fields: [invoice_id], references: [invoice_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_INVOICE_DETAIL_INVOICE")
  PRODUCT    PRODUCT  @relation(fields: [product_id], references: [product_id], onUpdate: NoAction, map: "FK_INVOICE_DETAIL_PRODUCT")
  USER       USER     @relation(fields: [user_id], references: [user_id], onUpdate: NoAction, map: "FK_INVOICE_DETAIL_USER")

  @@id([product_id, user_id], map: "PK_INVOICE_DETAIL")
}

model INVOICE_STATUS {
  invoice_status_id Int       @id(map: "PK_INVOICE_STATUS") @default(autoincrement())
  name              String    @db.NVarChar(50)
  INVOICE           INVOICE[]
}

model PRODUCT {
  product_id     Int              @id(map: "MA_SP") @default(autoincrement())
  vendor_id      Int?
  name           String           @db.NVarChar(Max)
  price          Float
  img_url        String?          @db.NVarChar(Max)
  amount         Int              @default(0, map: "DEFAULT_PRODUCT_amount")
  category_id    Int?
  description    String?          @db.NVarChar(Max)
  INVOICE_DETAIL INVOICE_DETAIL[]
  CATEGORY       CATEGORY?        @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_PRODUCT_CATEGORY")
  VENDOR         VENDOR?          @relation(fields: [vendor_id], references: [vendor_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_PRODUCT_VENDOR")
}

model ROLE {
  role_id       Int             @id(map: "PK_ROLE") @default(autoincrement())
  name          String?         @db.NVarChar(50)
  ROLE_FUNCTION ROLE_FUNCTION[]
  USER          USER[]
}

model ROLE_FUNCTION {
  role_id      Int
  function_id  Int
  date_created DateTime @db.DateTime
  FUNCTION     FUNCTION @relation(fields: [function_id], references: [function_id], onUpdate: NoAction, map: "FK_ROLE_FUNCTION_FUNCTION")
  ROLE         ROLE     @relation(fields: [role_id], references: [role_id], onUpdate: NoAction, map: "FK_ROLE_FUNCTION_ROLE")

  @@id([role_id, function_id], map: "PK_ROLE_FUNCTION")
  @@map("ROLE+FUNCTION")
}

model USER {
  user_id        Int              @id(map: "PK_taikhoan") @default(autoincrement())
  username       String           @db.NVarChar(50)
  password       String           @db.NVarChar(Max)
  date_created   DateTime?        @default(now(), map: "DEFAULT_USER_date_created") @db.Date
  status         Boolean          @default(true, map: "DEFAULT_USER_status")
  role_id        Int?
  CUSTOMER       CUSTOMER[]
  EMPLOYEE       EMPLOYEE[]
  INVOICE        INVOICE[]
  INVOICE_DETAIL INVOICE_DETAIL[]
  ROLE           ROLE?            @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_USER_ROLE")
}

model VENDOR {
  vendor_id Int       @id(map: "PK_VENDOR") @default(autoincrement())
  name      String?   @db.NVarChar(50)
  PRODUCT   PRODUCT[]
}
