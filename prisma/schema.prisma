generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BANNER {
  banner_id Int    @id @default(autoincrement())
  image_url  String @db.LongText
  open_url           String @db.LongText
}

model CATEGORY {
  category_id Int       @id @default(autoincrement())
  name        String?   @db.LongText
  PRODUCT     PRODUCT[]
}

model CUSTOMER {
  customer_id         Int     @id @default(autoincrement())
  name                String? @db.VarChar(50)
  address             String? @db.VarChar(50)
  phone               String? @db.VarChar(15)
  personal_id String? @db.VarChar(50)
  user_id     Int?
  USER                USER?   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_user")

  @@index([user_id], map: "fk_customer_user")
}

model EMPLOYEE {
  employee_id     Int       @id @default(autoincrement())
  name    String?   @db.VarChar(50)
  address         String?   @db.LongText
  phone   String?   @db.VarChar(15)
  personal_id     String?   @db.VarChar(50)
  sex     String?   @db.Char(10)
  birthday        DateTime? @db.Date
  user_id Int?
  USER            USER?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employee_user")
  INVOICE         INVOICE[]

  @@index([user_id], map: "fk_employee_user")
}

/// This model has been renamed to 'Renamedfunction' during introspection, because the original name 'function' is reserved.
model FUNCTION {
  function_id   Int             @id @default(autoincrement())
  name          String?         @db.VarChar(50)
  date_created  DateTime?       @db.Date
  ROLE_FUNCTION ROLE_FUNCTION[]

  @@map("function")
}

model INVOICE {
  invoice_id     Int              @id @default(autoincrement())
  employee_id    Int?
  user_id        Int?
  status_id      Int
  total_product  Int?
  total_amount   Int?
  date_created   DateTime?        @db.Date
  employee       EMPLOYEE?        @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice_employee_1")
  INVOICE_STATUS INVOICE_STATUS   @relation(fields: [status_id], references: [status_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice_invoice_status")
  USER           USER?            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice_user")
  INVOICE_DETAIL INVOICE_DETAIL[]

  @@index([employee_id], map: "fk_invoice_employee_1")
  @@index([status_id], map: "fk_invoice_invoice_status")
  @@index([user_id], map: "fk_invoice_user")
}

model INVOICE_DETAIL {
  id                 Int      @default(autoincrement())
  invoice_id         Int
  product_id Int
  amount             Int
  total              Float?
  tax                Float?
  user_id    Int
  INVOICE            INVOICE? @relation(fields: [invoice_id], references: [invoice_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice_detail_invoice")
  PRODUCT            PRODUCT  @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice_detail_product")
  USER               USER     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice_detail_user")

  @@id([product_id, user_id, invoice_id])
  @@index([invoice_id], map: "fk_invoice_detail_invoice")
  @@index([user_id], map: "fk_invoice_detail_user")
  @@index([id], map: "ix_autoincrement_INVOICE_DETAIL")
}

model INVOICE_STATUS {
  status_id Int       @id @default(autoincrement())
  name                      String    @db.VarChar(50)
  invoice                   INVOICE[]
}

model PRODUCT {
  product_id          Int              @id @default(autoincrement())
  vendor_id           Int?
  name                String           @db.LongText
  price               Float
  img_url             String?          @db.LongText
  amount              Int              @default(0)
  category_id Int?
  description         String?          @db.LongText
  INVOICE_DETAIL      INVOICE_DETAIL[]
  CATEGORY            CATEGORY?        @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_category")
  VENDOR              VENDOR?          @relation(fields: [vendor_id], references: [vendor_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_vendor")

  @@index([category_id], map: "fk_product_category")
  @@index([vendor_id], map: "fk_product_vendor")
}

model ROLE {
  role_id       Int             @id @default(autoincrement())
  name          String?         @db.VarChar(50)
  RoleMapFunction ROLE_FUNCTION[]
  USER          USER[]
}

model ROLE_FUNCTION {
  role_id              Int
  function_id          Int
  date_created DateTime        @db.DateTime(6)
  FUNCTION      FUNCTION @relation(fields: [function_id], references: [function_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_function_function")
  ROLE                 ROLE            @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_function_role")

  @@id([role_id, function_id])
  @@index([function_id], map: "fk_role_function_function")
  @@map("role+function")
}

model USER {
  user_id          Int              @id @default(autoincrement())
  username         String           @db.VarChar(50)
  password String           @db.LongText
  date_created     DateTime?        @db.Date
  status           Boolean          @default(dbgenerated("b'1'")) @db.Bit(1)
  role_id  Int?
  CUSTOMER         CUSTOMER[]
  EMPLOYEE         EMPLOYEE[]
  INVOICE          INVOICE[]
  INVOICE_DETAIL   INVOICE_DETAIL[]
  ROLE             ROLE?            @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_role")

  @@index([role_id], map: "fk_user_role")
}

model VENDOR {
  vendor_id Int       @id @default(autoincrement())
  name              String?   @db.VarChar(50)
  product           PRODUCT[]
}
